#!/usr/bin/python3
"""This module defines the DBStorage class, a new storage engine using SQLAlchemy"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from models.base_model import Base
from models.state import State
from models.city import City
from os import getenv

class DBStorage:
    """This class defines the DBStorage engine"""

    __engine = None
    __session = None

    def __init__(self):
        """Initializes the DBStorage engine"""
        self.__engine = create_engine('mysql+mysqldb://{}:{}@{}/{}'.
                                      format(getenv('HBNB_MYSQL_USER'),
                                             getenv('HBNB_MYSQL_PWD'),
                                             getenv('HBNB_MYSQL_HOST'),
                                             getenv('HBNB_MYSQL_DB')),
                                      pool_pre_ping=True)
        if getenv('HBNB_ENV') == 'test':
            Base.metadata.drop_all(self.__engine)

    def all(self, cls=None):
        """Queries all objects depending on the class name"""
        from models import classes

        query_dict = {}
        if cls:
            objects = self.__session.query(classes[cls]).all()
        else:
            for class_name, class_obj in classes.items():
                if class_name != "BaseModel":
                    objects = self.__session.query(class_obj).all()
                    for obj in objects:
                        key = "{}.{}".format(class_name, obj.id)
                        query_dict[key] = obj

        return query_dict

    def new(self, obj):
        """Adds the object to the current database session"""
        self.__session.add(obj)

    def save(self):
        """Commits all changes of the current database session"""
        self.__session.commit()

    def delete(self, obj=None):
        """Deletes obj from the current database session if not None"""
        if obj:
            self.__session.delete(obj)

    def reload(self):
        """Creates all tables in the database and creates the current database session"""
        from models.base_model import Base

        Base.metadata.create_all(self.__engine)
        Session = scoped_session(sessionmaker(bind=self.__engine,
                                              expire_on_commit=False))
        self.__session = Session()
